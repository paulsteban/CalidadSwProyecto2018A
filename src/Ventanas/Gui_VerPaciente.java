/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.Conexion;
import Clases.Paciente;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

public class Gui_VerPaciente extends javax.swing.JInternalFrame {

    /**
     * Creates new form AgregarDoctor
     */
    public Gui_VerPaciente() {
        initComponents();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("LISTA DE PACIENTES REGISTRADOS");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.setForeground(new java.awt.Color(0, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 153, 0));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/modificar.png"))); // NOI18N
        jButton2.setText("Modificar Datos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 446, 151, 46));

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 0, 0));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/salir.png"))); // NOI18N
        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 510, 180, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1435355619_search.png"))); // NOI18N
        jLabel1.setText("Buscar Pacientes Registrados:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 84, 234, 27));

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });
        jPanel1.add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(358, 81, 367, 35));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 122, 734, 318));

        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/activarDesactivar.png"))); // NOI18N
        jButton4.setText("Activar/Desactivar");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 510, 151, 50));

        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 102, 102));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/historial.png"))); // NOI18N
        jButton5.setText("Reporte del Historial MÃ©dico");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 446, -1, 46));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/paciente.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 11, 101, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 770, 600);
    }// </editor-fold>//GEN-END:initComponents

    public void Expediente(int ID_P, String Paciente) {

        Map<String, Object> parametros = new HashMap<String, Object>();
        parametros.put("IDPaciente", ID_P);

        File miDir = new File("");

        String reporte = miDir.getAbsolutePath() + "/src/Reportes/Expediente.jasper";

        JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(reporte, parametros, Conexion.con);
        } catch (JRException ex) {

            //   Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }

        JasperViewer view = new JasperViewer(jp, false);
        view.setTitle("Expediente - " + Paciente.trim());

        view.setZoomRatio((float) 0.95);
        view.setVisible(true);

        view.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        view.toFront();

    }

    public void Modificar() {

        int Fila = jTable1.getSelectedRow();

        //   System.out.println("Fila "+Fila);
        if (Fila >= 0) {

            int ID = Integer.parseInt(model.getValueAt(Fila, 0).toString());

            Gui_ModificarPaciente MP = new Gui_ModificarPaciente(null, true);
            MP.CargarDatos(ID);
            MP.setVP(this);
            MP.setVisible(true);

//        this.toBack();
//        ME.toFront();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar el registro a modificar",
                    "Seleccione", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Modificar();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    ResultSet resultado;

    public void CargarDatos() {
        model.setRowCount(0);

        String[] Header = {"No.", "Nombres", "Apellidos", "Peso", "Altura",
            "Edad", "Telefono", "Alergias", "Enfermedades", "Tipo Sangre", "Estado"};
        model.setColumnIdentifiers(Header);

        String[] Datos = new String[11];

        try {

            resultado = Conexion.consulta("Select * from paciente");

            while (resultado.next()) {
                Datos[0] = String.valueOf(resultado.getInt(1));
                Datos[1] = resultado.getString(2);
                Datos[2] = resultado.getString(3);
                Datos[3] = String.valueOf(resultado.getFloat(4));
                Datos[4] = String.valueOf(resultado.getFloat(5));
                Datos[5] = String.valueOf(resultado.getInt(6));
                Datos[6] = resultado.getString(7);
                Datos[7] = resultado.getString(8);
                Datos[8] = resultado.getString(9);
                Datos[9] = resultado.getString(10);

                boolean Estado = resultado.getBoolean(11);
                String Estate = "Inactivo";

                if (Estado) {
                    Estate = "Activo";
                }
                Datos[10] = Estate;

                model.addRow(Datos);
            }

        } catch (SQLException ex) {

        }

        jTable1.setModel(model);

    }

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        CargarDatos();
// TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameOpened

    public void ActDes() {

        int Fila = jTable1.getSelectedRow();
        int Col = 10;

        //   System.out.println("Fila "+Fila);
        if (Fila >= 0) {

            int ID = Integer.parseInt(model.getValueAt(Fila, 0).toString());
            String Estado = model.getValueAt(Fila, Col).toString();

            if (Estado.equalsIgnoreCase("Activo")) {
                Paciente.Desactivar_Paciente(ID); //Des  
            }
            if (Estado.equalsIgnoreCase("Inactivo")) {
                Paciente.Activar_Paciente(ID);  //Act
            }

            CargarDatos();

        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar el registro a Activar/Desactivar",
                    "Seleccione", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ActDes();   // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        VerExpediente();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    public void Buscar() {

        String Buscar = txtBuscar.getText();

        model.setRowCount(0);

        String[] Header = {"No.", "Nombres", "Apellidos", "Peso", "Altura",
            "Edad", "Telefono", "Alergias", "Enfermedades", "Tipo Sangre", "Estado"};
        model.setColumnIdentifiers(Header);

        String[] Datos = new String[11];

        try {

            resultado = Conexion.consulta("Select * from paciente where Nombres like '%" + Buscar + "%' "
                    + "or Apellidos like '%" + Buscar + "%'");

            while (resultado.next()) {
                Datos[0] = String.valueOf(resultado.getInt(1));
                Datos[1] = resultado.getString(2);
                Datos[2] = resultado.getString(3);
                Datos[3] = String.valueOf(resultado.getFloat(4));
                Datos[4] = String.valueOf(resultado.getFloat(5));
                Datos[5] = String.valueOf(resultado.getInt(6));
                Datos[6] = resultado.getString(7);
                Datos[7] = resultado.getString(8);
                Datos[8] = resultado.getString(9);
                Datos[9] = resultado.getString(10);

                boolean Estado = resultado.getBoolean(11);
                String Estate = "Inactivo";

                if (Estado) {
                    Estate = "Activo";
                }
                Datos[10] = Estate;

                model.addRow(Datos);
            }

        } catch (SQLException ex) {

        }

        jTable1.setModel(model);

    }


    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        Buscar();        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed

    public void VerExpediente() {

        int Fila = jTable1.getSelectedRow();

        //   System.out.println("Fila "+Fila);
        if (Fila >= 0) {

            int ID = Integer.parseInt(model.getValueAt(Fila, 0).toString());

            String Paciente = model.getValueAt(Fila, 1).toString().trim() + " " + model.getValueAt(Fila, 2).toString().trim();

            Expediente(ID, Paciente);

        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar el registro a modificar",
                    "Seleccione", JOptionPane.ERROR_MESSAGE);
        }

    }

    DefaultTableModel model = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {

            return false;
        }

    };
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
